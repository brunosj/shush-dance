/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    events: Event;
    releases: Release;
    merch: Merch;
    artists: Artist;
    tracks: Track;
    pages: Page;
    audio: Audio;
    media: Media;
    users: User;
    sales: Sale;
    'online-orders': OnlineOrder;
    'ticket-sales': TicketSale;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  globals: {
    socials: Social;
    settings: Setting;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events".
 */
export interface Event {
  id: string;
  title: string;
  event_information?:
    | {
        [k: string]: unknown;
      }[]
    | null;
  image?: string | Media | null;
  date: string;
  time?: string | null;
  location: string;
  artists?: (string | Artist)[] | null;
  ticketsAvailable?: boolean | null;
  ticketTiers?:
    | {
        tierName: string;
        price: string;
        visible?: boolean | null;
        strikeThrough?: boolean | null;
        stripePriceId: string;
        ticketLink?: string | null;
        id?: string | null;
      }[]
    | null;
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  caption?:
    | {
        [k: string]: unknown;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "artists".
 */
export interface Artist {
  id: string;
  artistName: string;
  artist_bio?:
    | {
        [k: string]: unknown;
      }[]
    | null;
  image?: string | Media | null;
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "releases".
 */
export interface Release {
  id: string;
  title: string;
  artist: string | Artist;
  tracks?: (string | Track)[] | null;
  description?:
    | {
        [k: string]: unknown;
      }[]
    | null;
  credits?:
    | {
        [k: string]: unknown;
      }[]
    | null;
  catalogNumber: string;
  releaseYear: number;
  slug?: string | null;
  price?: number | null;
  shippingPrices: {
    germany: number;
    germanyAdditional: number;
    eu: number;
    euAdditional: number;
    restOfWorld: number;
    restOfWorldAdditional: number;
  };
  stockQuantity?: number | null;
  isDigital?: boolean | null;
  artwork: string | Media;
  images?:
    | {
        image: string | Media;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tracks".
 */
export interface Track {
  id: string;
  audioGroup?: {
    audioFile?: (string | null) | Audio;
    audioHighQuality?: (string | null) | Audio;
    audioUpload?: (string | null) | Audio;
  };
  title?: string | null;
  artist: string | Artist;
  release?: (string | null) | Release;
  description?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "audio".
 */
export interface Audio {
  id: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "merch".
 */
export interface Merch {
  id: string;
  title: string;
  itemType: 'clothing' | 'prints' | 'other';
  description?:
    | {
        [k: string]: unknown;
      }[]
    | null;
  slug?: string | null;
  price: number;
  shippingPrices: {
    germany: number;
    germanyAdditional: number;
    eu: number;
    euAdditional: number;
    restOfWorld: number;
    restOfWorldAdditional: number;
  };
  stockQuantity?: number | null;
  isDigital?: boolean | null;
  mainImage: string | Media;
  images?:
    | {
        image?: string | Media | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  content?:
    | {
        [k: string]: unknown;
      }[]
    | null;
  showEventsFirst?: boolean | null;
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name?: string | null;
  roles?: ('admin' | 'user')[] | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sales".
 */
export interface Sale {
  id: string;
  itemName?: string | null;
  artist?: string | null;
  cmsItem?:
    | ({
        relationTo: 'releases';
        value: string | Release;
      } | null)
    | ({
        relationTo: 'merch';
        value: string | Merch;
      } | null);
  pointOfSale: 'bandcamp' | 'stripe' | 'paypal' | 'in-person' | 'promo';
  type: 'record' | 'merch' | 'digital';
  itemType?: string | null;
  package?: string | null;
  soldAt: string;
  itemPrice?: number | null;
  quantity: number;
  currency?: string | null;
  subTotal?: number | null;
  additionalFanContribution?: number | null;
  sellerTax?: number | null;
  marketplaceTax?: number | null;
  taxRate?: number | null;
  shipping?: number | null;
  itemTotal?: number | null;
  transactionFee?: number | null;
  feeType?: string | null;
  netAmount: number;
  buyerName?: string | null;
  buyerEmail?: string | null;
  buyerPhone?: string | null;
  city?: string | null;
  regionOrState?: string | null;
  country?: string | null;
  countryCode?: string | null;
  buyerNote?: string | null;
  bandcampTransactionId?: string | null;
  bandcampTransactionItemId?: string | null;
  bandcampRelatedTransactionId?: string | null;
  itemUrl?: string | null;
  referer?: string | null;
  refererUrl?: string | null;
  catalogNumber?: string | null;
  upc?: string | null;
  isrc?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "online-orders".
 */
export interface OnlineOrder {
  id: string;
  orderNumber: string;
  status: 'pending' | 'processing' | 'shipped' | 'delivered' | 'cancelled';
  paymentMethod: 'stripe' | 'paypal';
  paymentStatus: 'pending' | 'paid' | 'failed' | 'refunded';
  transactionId?: string | null;
  customerEmail: string;
  customerPhone?: string | null;
  firstName: string;
  lastName: string;
  shippingAddress?: {
    street?: string | null;
    city?: string | null;
    postalCode?: string | null;
    country?: string | null;
    shippingRegion?: ('germany' | 'eu' | 'restOfWorld') | null;
  };
  items: {
    product?:
      | ({
          relationTo: 'releases';
          value: string | Release;
        } | null)
      | ({
          relationTo: 'merch';
          value: string | Merch;
        } | null);
    cartItemId?: string | null;
    cartItemName?: string | null;
    cartItemDescription?: string | null;
    quantity: number;
    unitPrice: number;
    lineTotal: number;
    id?: string | null;
  }[];
  orderTotals: {
    subtotal: number;
    shipping: number;
    vat: number;
    total: number;
  };
  customerNotes?: string | null;
  internalNotes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ticket-sales".
 */
export interface TicketSale {
  id: string;
  ticketNumber: string;
  status: 'active' | 'used' | 'cancelled' | 'refunded';
  event?: (string | null) | Event;
  ticketTier: string;
  paymentMethod: 'stripe' | 'paypal';
  paymentStatus: 'pending' | 'paid' | 'failed' | 'refunded';
  transactionId?: string | null;
  customerEmail: string;
  customerPhone?: string | null;
  firstName: string;
  lastName: string;
  tickets: {
    cartItemId?: string | null;
    ticketName: string;
    ticketDescription?: string | null;
    quantity: number;
    unitPrice: number;
    lineTotal: number;
    stripePriceId?: string | null;
    id?: string | null;
  }[];
  ticketTotals: {
    subtotal: number;
    vat: number;
    total: number;
  };
  eventDate?: string | null;
  eventLocation?: string | null;
  eventTitle?: string | null;
  customerNotes?: string | null;
  internalNotes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "socials".
 */
export interface Social {
  id: string;
  items?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: string | Page;
          } | null;
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings".
 */
export interface Setting {
  id: string;
  lastBandcampSync?: string | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
